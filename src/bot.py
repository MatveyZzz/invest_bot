from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import asyncio
import os
from dotenv import load_dotenv

from grathics import generate_stock_chart
from data_manage import add_data, get_data, delete_data, update_user, check_subscription
from finance_info import company_search, get_time_series
import config
from bot_actions import search_n_select_company, reset_user, send_real_time_data
from data_manage import get_data, get_company_id

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")


# --- –ú–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def main_menu():
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏ üìà", callback_data="get_stock_info")],
        [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üîÑ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)", callback_data="update_stock_info")],
        [InlineKeyboardButton("–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ üìã(–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)", callback_data="market_summary")],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="settings_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def settings_menu():
    keyboard = [
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π(–ù–µ—Ç)", callback_data="manage_companies")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –¥–µ–Ω—å(–ù–µ—Ç)", callback_data="set_mail_count")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–æ–∫(–ù–µ—Ç)", callback_data="set_mail_time")],
        [InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É(–ù–µ—Ç)", callback_data="toggle_subscription")],
        [InlineKeyboardButton("–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö üóëÔ∏è", callback_data="reset_data")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–µ–Ω—é, –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏, –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç.–¥.

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–º–µ—Å—Ç–æ –ë–î) ---
users_data = {}

def get_user_data(user_id):
    if user_id not in users_data:
        users_data[user_id] = {
            "companies": [],
            "subscription": False,
            "requests_today": 0,
            "mail_count": 1,      # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –¥–µ–Ω—å
            "mail_times": []       # —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç "HH:MM")
        }
    return users_data[user_id]

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context):
    user = update.effective_user
    user_id = user.id
    await add_data('Users', user_id)
    await update_user(user_id, 'status', 'Idle')
    #get_user_data(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ.",
        reply_markup=main_menu()
    )

async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    #user_data = get_user_data(user_id)

    if data == "get_stock_info":
        # –í—ã–∑–æ–≤: –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Ticker-—Å–∏–º–≤–æ–ª –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ üîé:")
        await update_user(user_id, 'status', 'TICKER_AWAIT')

    # elif data == "update_stock_info":
    #     reqs_left = int((await get_data('Users', 'info_requests', 'user_tg_id', user_id))[0][0])
    #     if reqs_left > 0:
    #         companies_tasks = []
    #         for company in await get_data('LinkTable', 'company_id', 'user_tg_id', user_id):

        

    elif data == "market_summary":
        # –í—ã–∑–æ–≤: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ –ò–ò
        await query.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏...")

    elif data == "settings_menu":
        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await query.message.reply_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=settings_menu())

    elif data == "manage_companies":
        # –í—ã–∑–æ–≤: –ø–æ–∫–∞–∑–∞—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        await query.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏.")

    elif data == "set_mail_count":
        # –í—ã–∑–æ–≤: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –¥–µ–Ω—å
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É (—á–∏—Å–ª–æ):")

    elif data == "set_mail_time":
        # –í—ã–∑–æ–≤: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–æ–∫
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM. –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö ‚Äî —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

    # elif data == "toggle_subscription":
    #     # –í—ã–∑–æ–≤: –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    #     user_data["subscription"] = not user_data["subscription"]
    #     status = "–≤–∫–ª—é—á–µ–Ω–∞" if user_data["subscription"] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
    #     await query.message.reply_text(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ {status}.")

    elif data == "reset_data":
        # –í—ã–∑–æ–≤: —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await reset_user(user_id)
        await query.message.reply_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=main_menu())

    elif data == "back_to_main":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update_user(user_id, 'status', 'Idle')
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif data.startswith('Found_companies:'):
        data = data.split(':')[1:]
        additional_data = ''
        keyboard = []
        sub_status = await check_subscription(user_id, data[1], data[2])
        print(sub_status)
        if not sub_status:
            keyboard.append([InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data=f'AddCompany:{data[0]}:{data[1]}:{data[2]}')])
        else:
            additional_data = '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚úÖ'
        keyboard.append([InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_to_main')])

        result = await get_time_series(data[1], data[2], config.FIN_DATA_INTERVAL, config.FIN_DATA_OUTPUTS)
        await query.edit_message_text(text=f'–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞–∫—Ü–∏–∏ "{data[0]}" –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.\n' + additional_data,
                                      reply_markup=InlineKeyboardMarkup(keyboard))

        #–í—ã–∑–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        await send_real_time_data(result, update, context)
    
    elif data.startswith('AddCompany:'):
        data = data.split(':')[1:]
        company_id = await get_company_id(data[1], data[2])
        if not company_id:
            await add_data('Companies', data[0], data[1], data[2])
            company_id = await get_company_id(data[1], data[2])
        subs = (await get_data('Users', 'following', 'user_tg_id', user_id))[0]
        if subs[0] < config.SUBSCRIPTIONS_LIMIT:
            asyncio.gather(add_data('LinkTable', user_id, company_id), update_user(user_id, 'following', subs[0] + 1))
            answer =  '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!'
        elif subs[0] >= config.SUBSCRIPTIONS_LIMIT:
            answer = '–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ‚ùå'
        else:
            answer = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.'
        await query.message.reply_text(answer)

    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—ã–ª–æ–∫, –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–∏—Å–∫–∞)
async def text_handler(update: Update, context):
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    text = update.message.text

    status = (await get_data('Users', 'status', 'user_tg_id', user_id))[0]

    if status[0] == 'TICKER_AWAIT':
        result = await search_n_select_company(text)
        if result == -1:
            await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.")
        else:
            await update.message.reply_text('–í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:', reply_markup=result)
        

    # # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ —Ä–∞—Å—Å—ã–ª–æ–∫
    # if text.isdigit():
    #     user_data["mail_count"] = int(text)
    #     await update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {text} —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –¥–µ–Ω—å.")
    #     return

    # # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–æ–∫
    # if ":" in text:
    #     times = [t.strip() for t in text.split(",")]
    #     user_data["mail_times"] = times
    #     await update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {', '.join(times)}.")
    #     return

    # # –î—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç—ã: –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏
    # await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–≤–æ–¥...")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
